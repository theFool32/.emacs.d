;; -*- mode: lisp -*-

fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))

prog-mode latex-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) " FIXME: ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) " TODO: ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) " BUG: ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) " HACK: ")

latex-mode

(begin "\\begin{" (s env) "}" > n> r> "\\end{" (s env) "}")
(frac "\\frac{" p "}{" r "}")
(enumerate "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}")
(itemize "\\begin{itemize}\n\\item " r> n> "\\end{itemize}")
(ali "\\begin{align}" n "\\label{" p "}" n> r n "\\end{align}")
(eq "\\begin{equation}" n "\\label{" p "}" n> r n "\\end{equation}")
(e "\\emph{" r "}")


lisp-mode emacs-lisp-mode ;; Specify multiple modes

(lambda "(lambda (" p ")" n> r> ")")

emacs-lisp-mode

(lambda "(lambda (" p ")" n> r> ")")
(var "(defvar " p "\n  \"" r "\")")
(f "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(let "(let ((" p ")" p ")" n> r> ")")
(cmd "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive)" n> r> ")")
(up "(use-package " r ")")
(hook "(add-hook '" p " " r ")")
(w "(when " p ")")

c-mode :condition (re-search-backward "^\\w*$" (line-beginning-position) 'noerror)

(inc "#include <" (r (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) ">")
(incc "#include \"" (r (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) "\"")

org-mode

(quote "#+begin_quote" n> r> n> "#+end_quote")
(center "#+begin_center" n> r> n> "#+end_center")
(latex "#+begin_latex latex\n\\begin{align}" n> r> n> "\\end{align}\n#+end_latex")
(src "#+begin_src " p n> r> n> "#+end_src")
(e "#+begin_src emacs-lisp" n> r> n "#+end_src")
(ep "#+begin_src emacs-lisp" n> r> n "#+end_src" :post (progn (org-edit-src-code) (evil-insert-state)))
(link "[[" (s link) "][" r "]]")
(table "|" p "|" r "|" n> "|-+-|" n> "|||")
(ck "- [ ] " p)

python-ts-mode

(if "if " p ":" n> r)
(arg "parser.add_argment(\"-" p "\"" r ")")
(bang "#!/usr/bin/env python")
(cm "@classmethod" n> "def " p "(self, " p "):" n> r)
(cls "class " p ":" n> r)
(for "for " (s var) " in " (s collection) ":" n> r)
(fn "def " (s fun) "(" (s args) ") -> " (s return) ":" n> r)
(f "def " (s fun) "(" (s args) "):" n> r)
(ifm "if __name__ == '__main__':" n> r)
(init "def __init__(self, " (s args) "):" n> r)
(pdb "__import__(\"pdb\").set_trace()")
(ipdb "__import__(\"ipdb\").set_trace()")
(lambda "lambda " p ":" r)
(lt "[" p " for " p " in " r "]")
(main "def main():" n> r)
(not_impl "raise NotImplementedError")
(np "import numpy as np" n>)
(pargs "def parse_arguments():" n> "parser = argparse.ArgumentParser(description=\"" p "\")" n> r n> "return parser.parse_args()")
(sn "self." (s var) " = " (s var) n> r)
(while "while " p ":" n> r)
(p "print(" q ")")
(ips "import " p " as " q)
(ip "import " q)
(fp "from " p " import " q)
(fps "from " p " import " p " as " q)
