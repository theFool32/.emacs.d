;; -*- mode: lisp -*-

fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d") :eager t)

prog-mode latex-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) " FIXME: " :eager t)
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) " TODO: " :eager t)
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) " BUG: " :eager t)
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) " HACK: " :eager t)

latex-mode

(begin "\\begin{" (s env) "}" > n> r> "\\end{" (s env) "}" :eager t)
(frac "\\frac{" p "}{" p "}" :eager t)
(enumerate "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}" :eager t)
(itemize "\\begin{itemize}\n\\item " r> n> "\\end{itemize}" :eager t)
(ali "\\begin{align}" n "\\label{" p "}" n> p n "\\end{align}" :eager t)
(eq "\\begin{equation}" n "\\label{" p "}" n> p n "\\end{equation}" :eager t)
(e "\\emph{" p "}" :eager t)


lisp-mode emacs-lisp-mode ;; Specify multiple modes

(lambda "(lambda (" p ")" n> r> ")" :eager t)

emacs-lisp-mode

(lambda "(lambda (" p ")" n> r> ")" :eager t)
(var "(defvar " p "\n  \"" p "\")" :eager t)
(f "(defun " p " (" p ")\n  \"" p "\"" n> r> ")" :eager t)
(let "(let (" p ")" n> r> ")" :eager t)
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive)" n> r> ")" :eager t)
(up "(use-package " p ")" :eager t)
(hook "(add-hook '" p " " p ")" :eager t)

c-mode :condition (re-search-backward "^\\w*$" (line-beginning-position) 'noerror :eager t)

(inc "#include <" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) ">" :eager t)
(incc "#include \"" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) "\"" :eager t)

org-mode

(title "#+title: " p n "#+author: Daniel Mendler" n "#+language: en" n n :eager t)
(quote "#+begin_quote" n> r> n> "#+end_quote" :eager t)
(center "#+begin_center" n> r> n> "#+end_center" :eager t)
(src "#+begin_src " p n> r> n> "#+end_src" :eager t)
(elisp "#+begin_src emacs-lisp" n> r> n "#+end_src"
       :post (progn (tempel-done) (org-edit-src-code)) :eager t)
(link "[[" (s link) "][" (s description) "]]" :eager t)
(table "|" p "|" p "|" n> "|-+-|" n> "|||" :eager t)

python-mode

(if "if " p ":" n> p :eager t)
(arg "parser.add_argment(\"-" p "\"" p ")" :eager t)
(bang "#!/usr/bin/env python" :eager t)
(cm "@classmethod" n> "def " p "(self, " p "):" n> p :eager t)
(cls "class " p ":" n> p :eager t)
(for "for " (s var) " in " (s collection) ":" n> p :eager t)
(from "from " (s lib) " import " (s funcs) :eager t)
(f "def " (s fun) "(" (s args) "):" n> p :eager t)
(ifm "if __name__ == '__main__':" n> p :eager t)
(init "def __init__(self, " (s args) "):" n> p :eager t)
(ipdb "__import__(\"ipdb\").set_trace()" :eager t)
(lambda "lambda " p ":" p :eager t)
(list "[" p " for " p " in " p "]" :eager t)
(main "def main():" n> p :eager t)
(not_impl "raise NotImplementedError" :eager t)
(np "import numpy as np" n> :eager t)
(pargs "def parse_arguments():" n> "parser = argparse.ArgumentParser(description=\"" p "\")" n> p n> "return parser.parse_args()" :eager t)
(sn "self." (s var) " = " (s var) :eager t)
(while "while " p ":" n> p :eager t)
(p "print(" p ")" :post (tempel-done) :eager t)
